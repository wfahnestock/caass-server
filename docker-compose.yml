services:
  caass-auth:
    container_name: caass_auth
    build:
      context: .
      dockerfile: CAASS.Auth/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    environment:
      # Use appsettings.Development.Docker.json instead of appsettings.Development.json
      # in the container
      - ASPNETCORE_ENVIRONMENT=Development.Docker
      - ASPNETCORE_URLS=http://*:8080 # Set listen address
    ports:
      - "9090:8080"
    networks:
      - caass-network

  db:
    image: postgres:16
    restart: unless-stopped
    container_name: caass_tenants
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: bluesky1!
      ALLOW_IP_RANGE: 0.0.0.0/0
    ports:
      - "5432:5432"
    volumes:
        - D:\postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - caass-network

  adminer:
    build:
        context: ./Adminer
        dockerfile: Dockerfile.adminer
    restart: unless-stopped
    container_name: adminer
    depends_on:
        db:
          condition: service_healthy
    ports:
      - "8082:8080"
    networks:
        - caass-network
          
  # RabbitMQ - Event Bus used for tenant provisioning
  rabbitmq:
    build:
      context: ./RabbitMQ
      dockerfile: Dockerfile.rabbitmq
    restart: unless-stopped
    container_name: caass_eventbus
    hostname: caass_eventbus
    ports:
      - "15672:15672" # RabbitMQ management UI
      - "5672:5672"   # RabbitMQ AMQP protocol
    healthcheck:
      test: rabbitmq-diagnostics -q status && rabbitmq-diagnostics -q check_local_alarms
      interval: 60s
      timeout: 30s
      retries: 3
    networks:
      - caass-network
  
  # Provisioning Service - used for tenant provisioning
  caass-provisioning:
    container_name: caass_provisioning
    restart: unless-stopped
    build:
      context: .
      dockerfile: CAASS.ProvisionWorker/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://*:8081 # Set listen address
    ports:
      - "9091:8081"
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    networks:
      - caass-network

# Add future solutions here as new services

networks:
  caass-network:
    driver: bridge
    
volumes:
  postgres_data: